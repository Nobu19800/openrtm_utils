// This file is generated by omniidl (C++ backend) - omniORB_4_2. Do not edit.

#include "rtcControl.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_2_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_rtcControl_mrtcPathSeq = CORBA::TypeCode::PR_alias_tc("IDL:rtcControl/rtcPathSeq:1.0", "rtcPathSeq", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace rtcControl { 
  const ::CORBA::TypeCode_ptr _tc_rtcPathSeq = _0RL_tc_rtcControl_mrtcPathSeq;
} 
#else
const ::CORBA::TypeCode_ptr rtcControl::_tc_rtcPathSeq = _0RL_tc_rtcControl_mrtcPathSeq;
#endif

static CORBA::PR_structMember _0RL_structmember_rtcControl_mRTC__Data[] = {
  {"name", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"filename", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack)},
  {"num", CORBA::TypeCode::PR_short_tc()}
};

#ifdef _0RL_tc_rtcControl_mRTC__Data
#  undef _0RL_tc_rtcControl_mRTC__Data
#endif
static CORBA::TypeCode_ptr _0RL_tc_rtcControl_mRTC__Data = CORBA::TypeCode::PR_struct_tc("IDL:rtcControl/RTC_Data:1.0", "RTC_Data", _0RL_structmember_rtcControl_mRTC__Data, 3, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace rtcControl { 
  const ::CORBA::TypeCode_ptr _tc_RTC_Data = _0RL_tc_rtcControl_mRTC__Data;
} 
#else
const ::CORBA::TypeCode_ptr rtcControl::_tc_RTC_Data = _0RL_tc_rtcControl_mRTC__Data;
#endif






static CORBA::TypeCode_ptr _0RL_tc_rtcControl_mRTC__List = CORBA::TypeCode::PR_alias_tc("IDL:rtcControl/RTC_List:1.0", "RTC_List", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_rtcControl_mRTC__Data, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace rtcControl { 
  const ::CORBA::TypeCode_ptr _tc_RTC_List = _0RL_tc_rtcControl_mRTC__List;
} 
#else
const ::CORBA::TypeCode_ptr rtcControl::_tc_RTC_List = _0RL_tc_rtcControl_mRTC__List;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace rtcControl { 
  const ::CORBA::TypeCode_ptr _tc_RTCDataInterface = CORBA::TypeCode::PR_interface_tc("IDL:rtcControl/RTCDataInterface:1.0", "RTCDataInterface", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr rtcControl::_tc_RTCDataInterface = CORBA::TypeCode::PR_interface_tc("IDL:rtcControl/RTCDataInterface:1.0", "RTCDataInterface", &_0RL_tcTrack);
#endif

static void _0RL_rtcControl_mrtcPathSeq_marshal_fn(cdrStream& _s, void* _v)
{
  rtcControl::rtcPathSeq* _p = (rtcControl::rtcPathSeq*)_v;
  *_p >>= _s;
}
static void _0RL_rtcControl_mrtcPathSeq_unmarshal_fn(cdrStream& _s, void*& _v)
{
  rtcControl::rtcPathSeq* _p = new rtcControl::rtcPathSeq;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_rtcControl_mrtcPathSeq_destructor_fn(void* _v)
{
  rtcControl::rtcPathSeq* _p = (rtcControl::rtcPathSeq*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const rtcControl::rtcPathSeq& _s)
{
  rtcControl::rtcPathSeq* _p = new rtcControl::rtcPathSeq(_s);
  _a.PR_insert(_0RL_tc_rtcControl_mrtcPathSeq,
               _0RL_rtcControl_mrtcPathSeq_marshal_fn,
               _0RL_rtcControl_mrtcPathSeq_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, rtcControl::rtcPathSeq* _sp)
{
  _a.PR_insert(_0RL_tc_rtcControl_mrtcPathSeq,
               _0RL_rtcControl_mrtcPathSeq_marshal_fn,
               _0RL_rtcControl_mrtcPathSeq_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, rtcControl::rtcPathSeq*& _sp)
{
  return _a >>= (const rtcControl::rtcPathSeq*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const rtcControl::rtcPathSeq*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_rtcControl_mrtcPathSeq,
                    _0RL_rtcControl_mrtcPathSeq_unmarshal_fn,
                    _0RL_rtcControl_mrtcPathSeq_marshal_fn,
                    _0RL_rtcControl_mrtcPathSeq_destructor_fn,
                    _v)) {
    _sp = (const rtcControl::rtcPathSeq*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_rtcControl_mRTC__Data_marshal_fn(cdrStream& _s, void* _v)
{
  rtcControl::RTC_Data* _p = (rtcControl::RTC_Data*)_v;
  *_p >>= _s;
}
static void _0RL_rtcControl_mRTC__Data_unmarshal_fn(cdrStream& _s, void*& _v)
{
  rtcControl::RTC_Data* _p = new rtcControl::RTC_Data;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_rtcControl_mRTC__Data_destructor_fn(void* _v)
{
  rtcControl::RTC_Data* _p = (rtcControl::RTC_Data*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const rtcControl::RTC_Data& _s)
{
  rtcControl::RTC_Data* _p = new rtcControl::RTC_Data(_s);
  _a.PR_insert(_0RL_tc_rtcControl_mRTC__Data,
               _0RL_rtcControl_mRTC__Data_marshal_fn,
               _0RL_rtcControl_mRTC__Data_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, rtcControl::RTC_Data* _sp)
{
  _a.PR_insert(_0RL_tc_rtcControl_mRTC__Data,
               _0RL_rtcControl_mRTC__Data_marshal_fn,
               _0RL_rtcControl_mRTC__Data_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, rtcControl::RTC_Data*& _sp)
{
  return _a >>= (const rtcControl::RTC_Data*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const rtcControl::RTC_Data*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_rtcControl_mRTC__Data,
                    _0RL_rtcControl_mRTC__Data_unmarshal_fn,
                    _0RL_rtcControl_mRTC__Data_marshal_fn,
                    _0RL_rtcControl_mRTC__Data_destructor_fn,
                    _v)) {
    _sp = (const rtcControl::RTC_Data*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_rtcControl_mRTC__List_marshal_fn(cdrStream& _s, void* _v)
{
  rtcControl::RTC_List* _p = (rtcControl::RTC_List*)_v;
  *_p >>= _s;
}
static void _0RL_rtcControl_mRTC__List_unmarshal_fn(cdrStream& _s, void*& _v)
{
  rtcControl::RTC_List* _p = new rtcControl::RTC_List;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_rtcControl_mRTC__List_destructor_fn(void* _v)
{
  rtcControl::RTC_List* _p = (rtcControl::RTC_List*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const rtcControl::RTC_List& _s)
{
  rtcControl::RTC_List* _p = new rtcControl::RTC_List(_s);
  _a.PR_insert(_0RL_tc_rtcControl_mRTC__List,
               _0RL_rtcControl_mRTC__List_marshal_fn,
               _0RL_rtcControl_mRTC__List_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, rtcControl::RTC_List* _sp)
{
  _a.PR_insert(_0RL_tc_rtcControl_mRTC__List,
               _0RL_rtcControl_mRTC__List_marshal_fn,
               _0RL_rtcControl_mRTC__List_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, rtcControl::RTC_List*& _sp)
{
  return _a >>= (const rtcControl::RTC_List*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const rtcControl::RTC_List*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_rtcControl_mRTC__List,
                    _0RL_rtcControl_mRTC__List_unmarshal_fn,
                    _0RL_rtcControl_mRTC__List_marshal_fn,
                    _0RL_rtcControl_mRTC__List_destructor_fn,
                    _v)) {
    _sp = (const rtcControl::RTC_List*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_rtcControl_mRTCDataInterface_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_rtcControl_mRTCDataInterface_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(rtcControl::RTCDataInterface::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_rtcControl_mRTCDataInterface_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, rtcControl::RTCDataInterface_ptr _o)
{
  rtcControl::RTCDataInterface_ptr _no = rtcControl::RTCDataInterface::_duplicate(_o);
  _a.PR_insert(rtcControl::_tc_RTCDataInterface,
               _0RL_rtcControl_mRTCDataInterface_marshal_fn,
               _0RL_rtcControl_mRTCDataInterface_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, rtcControl::RTCDataInterface_ptr* _op)
{
  _a.PR_insert(rtcControl::_tc_RTCDataInterface,
               _0RL_rtcControl_mRTCDataInterface_marshal_fn,
               _0RL_rtcControl_mRTCDataInterface_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = rtcControl::RTCDataInterface::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, rtcControl::RTCDataInterface_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(rtcControl::_tc_RTCDataInterface,
                    _0RL_rtcControl_mRTCDataInterface_unmarshal_fn,
                    _0RL_rtcControl_mRTCDataInterface_marshal_fn,
                    _0RL_rtcControl_mRTCDataInterface_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (rtcControl::RTCDataInterface_ptr)_r->_ptrToObjRef(rtcControl::RTCDataInterface::_PD_repoId);
    else
      _o = rtcControl::RTCDataInterface::_nil();
    return 1;
  }
  return 0;
}

