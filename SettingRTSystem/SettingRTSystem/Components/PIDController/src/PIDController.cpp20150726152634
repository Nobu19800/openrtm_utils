// -*- C++ -*-
/*!
 * @file  PIDController.cpp
 * @brief PID Controller
 * @date $Date$
 *
 * LGPL
 *
 * $Id$
 */

#include "PIDController.h"

// Module specification
// <rtc-template block="module_spec">
static const char* pidcontroller_spec[] =
  {
    "implementation_id", "PIDController",
    "type_name",         "PIDController",
    "description",       "PID Controller",
    "version",           "1.0.0",
    "vendor",            "Miyamoto Nobuhiko",
    "category",          "Control",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    // Configuration variables
    "conf.default.dataType", "TimedDouble",
    "conf.default.samplingTime", "0.01",
    "conf.default.realTime", "OFF",
    "conf.default.P", "1",
    "conf.default.D", "0",
    "conf.default.I", "0",
    "conf.default.type", "P",
    "conf.default.alpha", "0",
    "conf.default.beta", "0",
    // Widget
    "conf.__widget__.dataType", "text",
    "conf.__widget__.samplingTime", "text",
    "conf.__widget__.realTime", "radio",
    "conf.__widget__.P", "text",
    "conf.__widget__.D", "text",
    "conf.__widget__.I", "text",
    "conf.__widget__.type", "radio",
    "conf.__widget__.alpha", "text",
    "conf.__widget__.beta", "text",
    // Constraints
    "conf.__constraints__.dataType", "(TimedDouble,TimedFloat,TimedDoubleSeq,TimedFloatSeq)",
    "conf.__constraints__.realTime", "(ON,OFF)",
    "conf.__constraints__.type", "(P,PD,PI,I,PID,IPD,2DOF_PID)",
    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
PIDController::PIDController(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager)

    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
PIDController::~PIDController()
{
}



RTC::ReturnCode_t PIDController::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers
  
  // Set OutPort buffer
  
  // Set service provider to Ports
  
  // Set service consumers to Ports
  
  // Set CORBA Service Ports
  
  // </rtc-template>

  // <rtc-template block="bind_config">
  // Bind variables and configuration variable
  bindParameter("dataType", m_dataType, "TimedDouble");
  bindParameter("samplingTime", m_samplingTime, "0.01");
  bindParameter("realTime", m_realTime, "OFF");
  bindParameter("P", m_P, "1");
  bindParameter("D", m_D, "0");
  bindParameter("I", m_I, "0");
  bindParameter("type", m_type, "P");
  bindParameter("alpha", m_alpha, "0");
  bindParameter("beta", m_beta, "0");
  // </rtc-template>
  
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onFinalize()
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onActivated(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onDeactivated(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onExecute(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}


RTC::ReturnCode_t PIDController::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}



extern "C"
{
 
  void PIDControllerInit(RTC::Manager* manager)
  {
    coil::Properties profile(pidcontroller_spec);
    manager->registerFactory(profile,
                             RTC::Create<PIDController>,
                             RTC::Delete<PIDController>);
  }
  
};


